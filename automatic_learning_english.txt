
1. english text

2. convert voice to text

3. text translation
////////////////////////////////////////////////////////////

audio recognition library - cmusphinx / voce / kaldi 

////////////////////////////////////////////////////////////

javascript web speech api - provides google chrome browser
var recognition = new webkitSpeechRecognition();

<!-- text input by voice through google api -->
<!DOCTYPE html>
<html>
    
    <head>   
        <script>
            function start_recognition()
            {
                var rec = new webkitSpeechRecognition();
            
                rec.lang = "en-US";
                rec.start();
                
                rec.onresult = function(e)
                {
                    document.write(e.results[0][0].transcript);
                    rec.stop();
                };
            }
        </script>
    </head>

    <body>

        <p id="output" onclick="start_recognition()">...</p>

    </body>

</html>

////////////////////////////////////////////////////////////
text to image - Graphics 2D API
...........................................................

public class Text_to_image
{
    void out(String text, String name_file, int text_size)
    {
        BufferedImage img = new BufferedImage
        (1, 1, BufferedImage.TYPE_INT_RGB);

        Graphics2D g2d = img.createGraphics();
        
        Font font = new Font("Arial", Font.PLAIN, text_size);
        g2d.setFont(font);        
        
        FontMetrics size = g2d.getFontMetrics();
        int width = size.stringWidth(text);
        int heigth = size.getHeight();
        
        
        img = new BufferedImage
        (width, heigth, BufferedImage.TYPE_INT_RGB);
        
        g2d = img.createGraphics();
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setFont(font);

        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, width, heigth);

        g2d.setColor(Color.BLACK);
        g2d.drawString(text, 0, size.getAscent());

        try
        {
            ImageIO.write(img, "png", 
                    new File(name_file + ".png"));
        }
        catch (IOException ex)
        {
            System.err.println("file not write");
        }

        System.out.println("Image done");
    }
}

////////////////////////////////////////////////////////////
text to speech - FreeTTS / MaryTTS

add libraries:
marytts-client-5.2-jar-with-dependencies.jar
marytts-runtime-5.2-jar-with-dependencies.jar
marytts-lang-en-5.2.jar
voice-cmu-slt-hsmm-5.2.jar
voice-cmu-bdl-hsmm-5.2.jar
voice-cmu-rms-hsmm-5.2.jar
...........................................................

public class Text_to_speech
{
    public static void main(String[] args) 
            throws MaryConfigurationException, 
            SynthesisException
    {
        String text = "John is walking.";
        
        MaryInterface mary = new LocalMaryInterface();
        mary.setVoice("cmu-rms-hsmm");
        
        AudioInputStream audio = mary.generateAudio( text );
        
        new Play(audio);
    }
}

final class Play
{
    Play(AudioInputStream audio)
    {
        play_audio(audio);
    }
    
    void play_audio(AudioInputStream audio)
    {
        AudioPlayer tts = new AudioPlayer();
        tts.setAudio(audio);
        tts.start();
    }
}

////////////////////////////////////////////////////////////
text to image
text to speech
read file  line by line
...........................................................
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

class TextToImage
{
    void output(String text, int file_name, int text_size)
    {
        BufferedImage img = new BufferedImage
        (1, 1, BufferedImage.TYPE_INT_RGB);

        Graphics2D g2d = img.createGraphics();
        
        
        Font font = new Font("Arial", Font.PLAIN, text_size);
        g2d.setFont(font);        
        
        FontMetrics size = g2d.getFontMetrics();
        int width = size.stringWidth(text);
        int heigth = size.getHeight();
        
        
        img = new BufferedImage
        (width, heigth, BufferedImage.TYPE_INT_RGB);
        
        g2d = img.createGraphics();
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setFont(font);
        

        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, width, heigth);

        g2d.setColor(Color.BLACK);
        g2d.drawString(text, 0, size.getAscent());

        try
        {
            ImageIO.write(img, "png", 
                    new File(file_name + ".png"));
        }
        catch (IOException ex)
        {
            System.err.println("file not write " + ex);
        }

        System.out.println("Image done");
    }
}
...........................................................
import java.io.File;
import java.io.IOException;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import marytts.LocalMaryInterface;
import marytts.MaryInterface;
import marytts.exceptions.MaryConfigurationException;
import marytts.exceptions.SynthesisException;
import marytts.modules.synthesis.Voice;
import marytts.util.data.audio.AudioPlayer;
import marytts.signalproc.effects.AudioEffect;
import marytts.signalproc.effects.AudioEffects;

class TextToSpeech
{
    private MaryInterface mary;
    private AudioInputStream audio;

    TextToSpeech()
    {
        try
        {
            mary = new LocalMaryInterface();
            mary.setVoice("cmu-rms-hsmm");
        }
        catch (MaryConfigurationException ex)
        {
            System.err.println("MaryTTS is not configured");
        }
    }
    
    void output(String text, int file_name)
    {
        speech_generation(text);
        save_audio(file_name);
    }
    
    private void speech_generation(String text)
    {
        try
        {            
            audio = mary.generateAudio( text );
        }
        catch (SynthesisException ex)
        {
            System.err.println("speech is not generated");
        }
    }
    
    private void save_audio(int file_name)
    {
        try
        { 
            AudioSystem.write(audio, AudioFileFormat.Type.WAVE,
                    new File(file_name + ".wav"));
        }
        catch (IOException ex)
        {
            System.err.println("audio not saved");
        }
    }
    
    void set_voice(String voice)
    {
        mary.setVoice(voice);
    }

    void play_audio(AudioInputStream audio)
    {
        AudioPlayer tts = new AudioPlayer();
        tts.setAudio(audio);
        tts.start();
    }
    
    void get_list_voices()
    {
        /* output all installed voices */
         Voice.getAvailableVoices()
                    .stream()
                    .forEach(System.out::println);
        // cmu-rms en_US male unit general
        // cmu-bdl-hsmm en_US male hmm
    }
    
    void get_list_audio_effects()
    {
        /* output all audio effects */
        for(AudioEffect e : AudioEffects.getEffects())
        {
            System.out.println("====================");
            System.out.println(e.getName());
            System.out.println(e.getHelpText());
        }
        //mary.setAudioEffects("durScale:0.5;");
    }
}
...........................................................
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class ReadFile
{    
    private File file;
    private Scanner scanner;
    
    ReadFile(String pathname)
    {        
        file = new File(pathname);
        
        try
        {
            scanner = new Scanner(file);
        } 
        catch (FileNotFoundException ex)
        {
            System.err.println("file not found");
        }
    }
    
    boolean has_string()
    {
        return scanner.hasNextLine();
    }
    
    String get_string()
    {
        return scanner.nextLine();
    }
}

////////////////////////////////////////////////////////////
task:
get string from file by index

<?php
    $path = "file.txt";

    $string = file($path);

    echo $string[1];
?>
...........................................................
task: 
sending data using the POST method

<!-- main.html -->
<form action="get_data.php" method="post">
    email
    <input type="text" name="email"> 
    <br>

    password
    <input type="password" name="password">
    <br>

    <input type="submit">
</form>

/* get_data.php */
<?php
    echo $_POST["email"];

    echo '<br>';

    echo $_POST["password"];
?>
...........................................................
task:
connection to mysql / get data

/* database.php */
<?php
    /*
      1)create database my_db;
      2)use my_db;
      3)create table user(
        id int not null PRIMARY KEY AUTO_INCREMENT,
        email varchar(255) not null unique,
        password varchar(64) not null);
      4)insert into user value
        (null, "test@test.com", "12345");
    */

    $connection = mysqli_connect(
            "localhost",
            "root",
            "12345",
            "my_db");

    $sql = "select * from user "
            . "where email='test@test.com'";

    $result = mysqli_query($connection, $sql);

    $array = mysqli_fetch_array($result);

    echo $array[2];
    /* output: 12345 */
?>
...........................................................
task:
library for connecting to mysql

/* database.php */
<?php
class database
{            
    private $connection;
    
    function __construct()
    {
        $this->connect();
    }
            
    private function connect()
    {
        $this->connection = mysqli_connect(
                "localhost",
                "root",
                "12345",
                "my_db");
    }
    
    function find($table, $where)
    {
        $sql = "select * from $table where $where;";
        
        $result = mysqli_query($this->connection, $sql);
        
        return mysqli_fetch_array($result);
    }
    
    function close()
    {
        mysqli_close($this->connection);
    }
}
...........................................................
<!DOCTYPE html>
task:
logging in using mysql / creating and checking a session

/* main.php */
<form action="user_login.php" method="post">
    email
    <input type="text" name="email"> 
    <br>

    password
    <input type="password" name="password">
    <br>

    <input type="submit">
</form>

/* user_login.php */
<?php 
session_start(); 
include_once './database.php';

$email = filter_input(INPUT_POST, "email");
$password = filter_input(INPUT_POST, "password");


$db = new database();

$array = $db->find("user", "email='$email'");


if($array[2] == $password)
{
    $_SESSION["authorized"] = true;

    header("Location: account.php");
    /* correct password */
}
else
{
    header("Location: main.php");
    /* wrong password */
}
$db->close();

<!-- account.php -->
<?php
session_start();
if($_SESSION["authorized"] != true)
{
    header("Location: main.php");
}
else
{
    echo "welcome";
}
...........................................................
task:
exit the session by click the button

/* exit.php */
<?php 
$exit = filter_input(INPUT_POST, "exit");

if($exit == "true")
{
    session_destroy();
    header("Location: main.php");
}
?>
<form action="account.php" method="post">
    <input type="hidden" value="true" name="exit"> 
    <input type="submit" value="exit">
</form>
...........................................................
task:
check email and password

<?php
class email_and_password_check
{               
    function email_check($email)
    {
        if(filter_var($email, FILTER_VALIDATE_EMAIL) == NULL)
        {
            echo 'email not valid';
        }
    }
    
    function password_check($password)
    {
        if(strlen($password) < 8)
        {
            echo 'password < 8';
        }
        else if(strlen($password) > 20)
        {
            echo 'password > 20';
        }
        else if(preg_match("@[0-9]+@", $password) == false)
        {
            echo 'password 0-9';
        }
        else if(preg_match("@[a-z]+@", $password) == false)
        {
            echo 'password a-z';
        }
        else if(preg_match("@[A-Z]+@", $password) == false)
        {
            echo 'password A-Z';
        }
    }
}
...........................................................
task:
auto resize text and images

p, h1, div
{
    font-family: monospace; 
    font-size: 5vw;
}
img
{
    width: 50%;
    height: auto;
}
...........................................................
task:
ajax GET

/* ajax_get.php */
<?php
$get_one = filter_input(INPUT_GET, "AAA");
$get_two = filter_input(INPUT_GET, "BBB");
echo $get_one . " " . $get_two;

/* file.html */
<script>
function send_message_GET()
{
    var one = document.getElementById("ONE").value;
    var two = document.getElementById("TWO").value;

    var string = "ajax_get.php?AAA=" + one + "&BBB=" + two;


    var request = new XMLHttpRequest();

    request.open("GET", string, true);
    request.send();

    request.onreadystatechange = function()
    {
        if(this.readyState === 4 && this.status === 200)
        {
            document.getElementById("message")
                    .innerHTML = this.responseText;
        }
    };
}
</script>

<input type="text" id="ONE"/>
<input type="text" id="TWO"/>

<p onclick="send_message_GET()">SEND</p>

<h1 id="message"></h1>
...........................................................
task:
ajax POST

/* ajax_get.php */
<?php
$get_one = filter_input(INPUT_POST, "AAA");
$get_two = filter_input(INPUT_POST, "BBB");
echo $get_one . " " . $get_two;

/* file.html */
<script>
function send_message_POST()
{
    var one = document.getElementById("ONE").value;
    var two = document.getElementById("TWO").value;
    
    var req = new XMLHttpRequest();
   
    req.onreadystatechange = function()
    {
        if(this.readyState === 4 && this.status === 200)
        {
            document.getElementById("message")
                    .innerHTML = this.responseText;
        }
    };
    req.open("POST", "ajax_get.php", true);
    req.setRequestHeader("Content-type", 
                         "application/x-www-form-urlencoded");
                         
    req.send("AAA=" + one + "&BBB=" + two);
}
</script>

<input type="text" id="ONE"/>
<input type="text" id="TWO"/>

<p onclick="send_message_POST()">SEND</p>

<h1 id="message"></h1>
...........................................................
/* ajax.js */
function post(php_file, response_in_html, query_string)
{
    var request = new XMLHttpRequest();
    
    request.onreadystatechange = function()
    {
        if(this.readyState === 4 && this.status === 200)
        {
            document.getElementById(response_in_html)
                    .innerHTML = this.responseText;
        }
    };
    request.open("POST", php_file, true);
    request.setRequestHeader(
            "Content-type", 
            "application/x-www-form-urlencoded");
    request.send(query_string);
}

/* file.html */
<script src="ajax.js"></script>
<script>
function login()
{
    var email    = document.getElementById("email").value;
    var password = document.getElementById("password").value;
    
    var query_string = "email=" + email +
                       "&password=" + password;
    
    post("user_login.php", "message", query_string);
}
</script>

email    <input type="text"     id="email"> 
password <input type="password" id="password">

<button onclick="login()">login</button>

<h1 id="message"></h1>

/* user_login.php */
<?php
$email = filter_input(INPUT_POST, "email");
$password = filter_input(INPUT_POST, "password");

if($email == "AAA" && $password == "AAA")
{
    echo 'correct password';
}
else
{
    echo 'wrong password';
}
...........................................................
/* print.php */
<?php
function set($value)
{
    echo $value;
}

/* audio_and_image.php */
<?php
include_once './print.php';

$index = (int) filter_input(INPUT_POST, "index");

$words = str_replace(["\n", "\r"], "", file("words.txt"));
?>

<p> <?php set($words[$index]);?> </p>

<audio controls 
       src="<?php set($index . ".wav"); ?>">
       Your browser does not support the audio element
</audio>

<img id="set_image"
     src="<?php set($index . ".png"); ?>"/> 

<form method="POST">
    <input type="hidden" 
           name="index" 
           value="<?php set($index + 1); ?>">
    <input type="submit" value="next">
</form>
...........................................................
task:
calculate string similarity using Levenshtein distance
matrix setup
    A B C
  0 1 2 3 
A 1 0 0 0

(A == A)      1) set number from up-left
    A B C
  0 1 2 3 
A 1[0]0 0

(A != B)      1) find min number left, up, up-left
    A B C     2) set (min=0) + 1
  0 1 2 3 
A 1 0[0]0

(A != C)      1) find min number from left, up, up-left
    A B C     2) set (min=1) + 1
  0 1 2 3 
A 1 0 1[0]

RESULT
    A B C    
  0 1 2 3 
A 1 0 1[2]
levenshtein distance = 2
code:
public class StringSimilarity
{
    public static void main(String[] args)
    {
        levenshtein_distance set = new levenshtein_distance();
        
        System.out.println("levenshtein distance = " 
                          + set.check("A", "ABС") );
    }
}

class levenshtein_distance
{
    int check(String first, String second)
    {
        int first_length  = first.length()  + 1;
        int second_length = second.length() + 1;
        
        int matrix[][] = 
                new int[first_length][second_length];
        
        /* matrix setup */
        for(int i = 0; first_length > i; i++)
        {
            matrix[i][0] = i;
        }
        for(int u = 0; second_length > u; u++)
        {
            matrix[0][u] = u;
        }
        
        System.out.println(first);
        System.out.println(second);
        System.out.println("----");
        
        /*  i-down  u-right  */
        for(int i = 1; first_length > i; i++)
        {
            for(int u = 1; second_length > u; u++)
            {
                System.out.println(first.charAt(i - 1) + " " +
                                  second.charAt(u - 1));
                System.out.println("i=" + i + " u=" + u);
                
                
                if(first.charAt(i - 1) == second.charAt(u - 1))
                {
                    System.out.println("CHARS EQUAL");
                    print_2D_array(matrix, first_length, second_length);
                    
                    matrix[i][u] = matrix[i-1][u-1];
                }
                else
                {
                    System.out.print  ("left "    + matrix[i][u-1]   + " ");
                    System.out.print  ("up "      + matrix[i-1][u]   + " ");
                    System.out.println("up-left " + matrix[i-1][u-1]);
                    print_2D_array(matrix, first_length, second_length);
                    
                    matrix[i][u] = 
                            
                    1 + min(matrix[i]   [u-1],        // left
                            matrix[i-1] [u],          // up
                            matrix[i-1] [u-1]);       // up-left 
                } 
            }
        }
        
        System.out.println("RESULT");
        print_2D_array(matrix, first_length, second_length);
        
        return matrix[first_length - 1][second_length - 1];
    }
    
    int min(int a, int b, int c)
    {
        return Math.min(Math.min(a, b), c);
    }
    
    void print_2D_array(int array[][], int one, int two)
    {
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                System.out.print(array[i][u] + " ");
            }
            System.out.println("");
        }
    }
}
output:
A
ABC
----
A A
i=1 u=1
CHARS EQUAL
0 1 2 3 
1 0 0 0 
A B
i=1 u=2
left 0 up 2 up-left 1
0 1 2 3 
1 0 0 0 
A C
i=1 u=3
left 1 up 3 up-left 2
0 1 2 3 
1 0 1 0 
RESULT
0 1 2 3 
1 0 1 2 
levenshtein distance = 2
...........................................................
/* string similarity */
<script>
function levenshtein_distance(first, second)
{    
    var first_length  = first.length  + 1;
    var second_length = second.length + 1;
    
    var matrix = create_2D_array(first_length);
    
    /* matrix setur */
    for(i = 0; first_length > i; i++)
    {
        matrix[i][0] = i;
    }
    for(u = 0; second_length > u; u++)
    {
        matrix[0][u] = u;
    }
    
    /*  i-down  u-right  */
    for(i = 1; first_length > i; i++)
    {
        for(u = 1; second_length > u; u++)
        {
            if(first.charAt(i - 1) === second.charAt(u - 1))
            {
                matrix[i][u] = matrix[i-1][u-1];
            }
            else
            {
                matrix[i][u] = 

                1 + min(matrix[i]   [u-1],        // left
                        matrix[i-1] [u],          // up
                        matrix[i-1] [u-1]);       // up-left 
            } 
        }
    }
    return matrix[first_length - 1][second_length - 1];
}
function min(a, b, c)
{
    return Math.min(Math.min(a, b), c);
}
function create_2D_array(rows)
{
    var array = [];
    
    for(i = 0; rows > i; i++)
    {
        array[i] = [];
    }
    return array;
}
</script>

<script>
function string_similarity(first, second)
{
    if(second.length > first.length)
    {
        temp = first; first = second; second = temp;
    }
    
    first  = first.toLowerCase();
    second = second.toLowerCase();
    
    /*
        ABC      = 3 [length]
        AB       = 2 [length]
        distance = 1
        100%  / ABC      = 33.3% [one character percentage]
        33.3% * distance = 33.3% [distance]
        100% - [distance]= 66.6% [similary]
    */

    percentage_change  = 100 / first.length;
    percentage_change *= levenshtein_distance(first, second);
    
    return 100 - percentage_change;
}
console.log(string_similarity("ABC", "AB"));
</script>
...........................................................
kaldi
1) cd kaldi/tools/extras
2) ./check_dependencies.sh
sudo apt-get install [dependencies]
3) cd kaldi/tools
4) make
5) cd kaldi/src
6) ./configure --shared
7) make depend
8) make
...........................................................
import speech_recognition as sr

r = sr.Recognizer()

with sr.AudioFile("audio.wav") as source:

    audio = r.record( source )
    
    print ( r.recognize_google(audio) )
...........................................................
/* audio similarity */
libraries: musicg-1.4.2.1.jar 
import com.musicg.fingerprint.FingerprintManager;
import com.musicg.fingerprint.FingerprintSimilarity;
import com.musicg.fingerprint.FingerprintSimilarityComputer;
import com.musicg.wave.Wave;

public class  AudioSimilarity
{
    public static void main(String[] args)
    {
        byte[] one = new FingerprintManager()
                .extractFingerprint(new Wave("original.wav"));
        byte[] two = new FingerprintManager()
                .extractFingerprint(new Wave("similar.wav"));
        
        FingerprintSimilarity similaruty =
                new FingerprintSimilarityComputer(one, two)
                .getFingerprintsSimilarity();
        
        System.out.println(similaruty.getScore());
    }
}
...........................................................
/* save POST file from form on the server */
<form method="POST" enctype="multipart/form-data">
    <input type="file" name="my_file">
    <input type="submit">
</form>

<?php
$now_path = $_FILES["my_file"]["tmp_name"];
$new_path = $_FILES["my_file"]["name"];

if(move_uploaded_file($now_path, $new_path))
{
    echo "FILE moved ";
    echo "FILE PATH: " . $new_path;
    echo "FILE TYPE: " . $_FILES["my_file"]["type"];
    echo "FILE SIZE: " . $_FILES["my_file"]["size"];
}
...........................................................
/* record audio from microphone & upload to server */
<p>
    <button id="start_button">RECORD</button>  
    <button id="stop_button">STOP</button>
</p>
<audio id="audio_element" controls></audio>

<script>
function record_audio_from_microphone()
{
    var start = document.getElementById("start_button");
    var stop  = document.getElementById("stop_button");
    var media_recorder;
    
    const enable_audio = { audio: true };
    
    var run = function(stream)
    {
        console.log("works");
        
        media_recorder = new MediaRecorder(stream);
        
        start.addEventListener("click", start_recording);
        stop.addEventListener("click", stop_recording);

        media_recorder.addEventListener("dataavailable", 
                                        set_blob);
    };
    
    function start_recording()
    {
        console.log("start_recording");
        media_recorder.start();
    }
    function stop_recording()
    {
        console.log("stop_recording");
        media_recorder.stop();
    }
    function set_blob(blob)
    {
        var blob_audio = blob.data;
        
        set_recording_to_element(blob_audio);
        upload_to_server(blob_audio);
    }
    function set_recording_to_element(blob_audio)
    {
        document.getElementById("audio_element")
                .src = URL.createObjectURL(blob_audio);
    }
    function upload_to_server(blob_audio)
    {
        var file = new File([blob_audio], "speech.wav");
        console.log(file);
        
        var req = new XMLHttpRequest();
        var form = new FormData();

        form.append("my_file", file);
        req.open("POST", "upload_file.php", true);
        req.send(form);
    }
    
    navigator.mediaDevices
            .getUserMedia(enable_audio)
            .then(run);
}

record_audio_from_microphone();
</script>

/* upload_file.php */
<?php
$now_path = $_FILES["my_file"]["tmp_name"];
$new_path = $_FILES["my_file"]["name"];

move_uploaded_file($now_path, $new_path);
...........................................................
import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))
    
def sigmoid_derivative(x):
    return x * (1 - x)


training_inputs = np.array([  [0, 0, 1],
                              [0, 1, 1],
                              [1, 0, 1],
                              [1, 1, 1]  ])
   
training_outputs = np.array([0, 0, 1, 1])

print ("training_inputs: ")
print (training_inputs)

print ("training_outputs: ")
print (training_outputs)

# np.random.seed( 888 )
# weights = np.random.random(3)
weights = [0.9, 0.2, 0.5]

print ("weights: ")
print (weights)


for iteration in range(10):
    
    outputs = sigmoid( np.dot(training_inputs, weights) )
    
    error = training_outputs - outputs
    
    
    adj = error * sigmoid_derivative(outputs)
    
    weights += np.dot(training_inputs.T, adj)
    
    print (weights)
  
print ("*****")  
print (outputs)
...........................................................
public class Main_
{
    public static void main(String[] args)
    {
        double[][] X = 
        { 
            {0, 0}, 
            {0, 1}, 
            {1, 0}, 
            {1, 1} 
        };
        
        double[][] Y = 
        { 
            {0}, {1}, {1}, {0}
        };
        
        NN nn = new NN();
    }
}

class NN
{
    /*  */
    double[][] transpose(double[][] matrix)
    {
        int one = matrix.length;
        int two = matrix[0].length;
        
        double[][] transposed = new double[two][one];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                transposed[u][i] = matrix[i][u];
            }
        }
        
        return transposed;
    }
    
    double[][] sum(double[][] first, double[][] second)
    {
        int one = first.length;
        int two = first[0].length;
        
        double[][] sum = new double[one][two];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                sum[i][u] = first[i][u] + second[i][u];
            }
        }
        
        return sum;
    }
    double[][] sum_of_multiplication(double[][] first, double[][] second)
    {
        int first_1  = first.length;
        int first_2  = first[0].length;
        int second_2 = second[0].length;
        
        double[][] sum = new double[first_1][second_2];
        
        for(int i = 0; first_1 > i; i++)
        {
            for(int u = 0; second_2 > u; u++)
            {
                for(int y = 0; first_2 > y; y++)
                {
                    sum[i][u] += first[i][y] * second[y][u];
                }
            }
        }
        
        return sum;
    }
    
    double[][] subtract(double[][] first, double[][] second)
    {
        int one = first.length;
        int two = first[0].length;
        
        double[][] subtract = new double[one][two];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                subtract[i][u] = first[i][u] - second[i][u];
            }
        }
        
        return subtract;
    }
    double[][] subtract(double[][] first, double second)
    {
        int one = first.length;
        int two = first[0].length;
        
        double[][] subtract = new double[one][two];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                subtract[i][u] = first[i][u] - second;
            }
        }
        
        return subtract;
    }
    
    double[][] multiply(double[][] first, double[][] second)
    {
        int one = first.length;
        int two = first[0].length;
        
        double[][] multiply = new double[one][two];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                multiply[i][u] = first[i][u] * second[i][u];
            }
        }
        return multiply;
    }
    double[][] multiply(double[][] first, double second)
    {
        int one = first.length;
        int two = first[0].length;
        
        double[][] multiply = new double[one][two];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                multiply[i][u] = first[i][u] * second;
            }
        }
        return multiply;
    }
    
    double[][] divide(double[][] first, double second)
    {
        int one = first.length;
        int two = first[0].length;
        
        double[][] divide = new double[one][two];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                divide[i][u] = first[i][u] / second;
            }
        }
        return divide;
    }
    
    void dot(double[][] first, double[][] second)
    {
        int first_1 = first.length;
        int first_2 = first[0].length;
        int second_2 = second[0].length;
        
        double[][] dot = new double[first_1][second_2];
        
        for(int i = 0; first_1 > i; i++)
        {
            for(int u = 0; second_2 > u; u++)
            {
                for(int y = 0; first_2 > y; y++)
                {
                    dot[i][u] += first[i][y] + second[y][u];
                }
            }
        }
    }
    
    double sigmoid(double x)
    {
        return 1 / ( 1 + Math.exp(-x) );
    }
    
    double get_random(int num)
    {
        Random random = new Random(num);
        return random.nextDouble();
    }
    
    void print_matrix(double[][] matrix)
    {         
        for(int i = 0; matrix.length > i; i++)
        {
            for(int u = 0; matrix[0].length > u; u++)
            {
                System.out.print(matrix[i][u] + " ");
            }
            System.out.println("");
        }
    }
}

class _Perceptron
{
    int input[][] = 
    {
        {0, 0}, 
        {0, 1}, 
        {1, 0}, 
        {1, 1}
    };
    int output[]  = {0, 0, 0, 1};
    int epoch = 1;
    
    double weight[] = {0.111, 0.222};
    double rate = 0.1;
    double bias = 0.2;
    
    void start()
    {
        for(int i1 = 0; epoch > i1; i1++)
        {
            output();
        }
    }
    void input(int i2, int error)
    {
        for(int i4 = 0; input[0].length > i4; i4++)
        {
            double delta = rate * input[i2][i4] * error;
            
            System.out.println("3) " + delta 
                                + " = " + rate 
                                + " * " + (int)input[i2][i4] 
                                + " * " + error
                    + "  [double delta = rate * input[i2][i4] * error]");
            
            weight[i4] += delta;
            
            System.out.println("4) " 
                    + weight[i4] + " += " + delta
                    + "  [weight[i4] += delta]");
        }
    }
    void output()
    {
        for(int i2 = 0; output.length > i2; i2++)
        {
            int calc  = calc(input[i2]);
            int error = output[i2] - calc;
            
            System.out.println("2) " + error 
                                + " = " + output[i2] 
                                + " - " + calc
                    + "  [int error = output[i2] - calc]");
            
            input(i2, error);
        }
    }
    int calc(int input[])
    {
        System.out.println(input[0] + " " + input[1]);
        
        double sum = 0;
        
        for(int i3 = 0; input.length > i3; i3++)
        {
            sum += weight[i3] * input[i3];
            
            System.out.println("1) " + sum 
                                + " += " + weight[i3] 
                                + " * " + (int)input[i3]
                    + "  [sum += weight[i3] * input[i3]]");
        }
        
        if(sum > bias)
        { 
            System.out.println("sum > bias");
            return 1;
        }
        else if(sum < bias)
        {
            System.out.println("sum < bias");
        }
        return 0;
    }
}
...........................................................
class NN
{        
    double[] sigmoid(double x[])
    {
        double result[] = {0, 0, 0, 0};
        
        for(int i = 0; x.length > i; i++)
        {
            result[i] = 1 / (1 + Math.exp( -x[i] ));
        }
        
        return result;
    }
    
    double[] sigmoid_derivative(double x[])
    {
        double result[] = {0, 0, 0, 0};
        
        for(int i = 0; x.length > i; i++)
        {
            result[i] = x[i] * (1 - x[i]);
        }
        
        return result;
    }
    
    int training_inputs[][] = {  {0, 0, 1}, 
                                 {0, 1, 1}, 
                                 {1, 0, 1}, 
                                 {1, 1, 1}  };
    
    int training_outputs[] = {0, 0, 1, 1};
    
    /* random weights */
    double weights[] = {  0.9, 
                          0.2, 
                          0.5  };
    
    void training()
    {
        for(int i = 0; 1 > i; i++)
        {
            double outputs[] = 
                    sigmoid( dot(training_inputs, weights) );
            
            double error[] = 
                    subtract(training_outputs, outputs);
            
            double adjustment[] = 
                    multiply(error, sigmoid_derivative(outputs));
            
            sum_to_weights
            ( 
                    dot_(transpose(training_inputs), adjustment) 
            );
        }
    }
    
    double[] dot(int inputs[][], double weights[])
    { 
        double result[] = {0, 0, 0, 0};
        
        for(int i = 0; inputs.length > i; i++)
        {
            for(int u = 0; inputs[0].length > u; u++)
            {
                result[i] += inputs[i][u] * weights[u];
            }
        }
        
        return result;
    }

    double[] subtract(int training_outputs[], double outputs[])
    {
        double result[] = {0, 0, 0, 0};
        
        for(int i = 0; training_outputs.length > i; i++)
        {
            result[i] = training_outputs[i] - outputs[i];
        }
        
        return result;
    }
    
    double[] multiply(double error[], double sigmoid_derivative[])
    {
        double result[] = {0, 0, 0, 0};
        
        for(int i = 0; error.length > i; i++)
        {
            result[i] = error[i] * sigmoid_derivative[i];
        }
        
        return result;
    }
    
    int[][] transpose(int matrix[][])
    {
        int one = matrix.length;
        int two = matrix[0].length;
        
        int transposed[][] = new int[two][one];
        
        for(int i = 0; one > i; i++)
        {
            for(int u = 0; two > u; u++)
            {
                transposed[u][i] = matrix[i][u];
            }
        }
        
        return transposed;
    }
    
    double[] dot_(int[][] transpose, double[] adjustment)
    {
        double result[] = {0, 0, 0};
        
        for(int i = 0; transpose.length > i; i++)
        {
            for(int u = 0; transpose[0].length > u; u++)
            {
                result[i] += transpose[i][u] * adjustment[u];
            }
        }
        
        return result;
    }

    void sum_to_weights(double[] dot_)
    {
        for(int i = 0; weights.length > i; i++)
        {
            weights[i] += dot_[i];
        }
    }
}
/*
training_inputs:
 0 0 1
 0 1 1
 1 0 1
 1 1 1
training_outputs:
 0 0 1 1

weights:
0.9  0.2  0.5

dot(training_inputs, weights)
0*0.9 + 0*0.2 + 1*0.5 = 0.5
0*0.9 + 1*0.2 + 1*0.5 = 0.7
1*0.9 + 0*0.2 + 1*0.5 = 1.4
1*0.9 + 1*0.2 + 1*0.5 = 1.6

outputs: sigmoid( dot(training_inputs, weights) )
1 / (1 + e^-0.5) = 0.62245933
1 / (1 + e^-0.7) = 0.66818777
1 / (1 + e^-1.4) = 0.80218389
1 / (1 + e^-1.6) = 0.83201839

error: subtract(training_outputs, outputs)
0 - 0.62245933 = -0.62245933
0 - 0.66818777 = -0.66818777
1 - 0.80218389 = 0.19781611
1 - 0.83201839 = 0.16798161

sigmoid_derivative(outputs)
0.62245933 * (1 - 0.62245933) = 0.23500371
0.66818777 * (1 - 0.66818777) = 0.22171287
0.80218389 * (1 - 0.80218389) = 0.15868490
0.83201839 * (1 - 0.83201839) = 0.13976379

adjustment: multiply(error, sigmoid_derivative(outputs))
-0.62245933 * 0.23500371 = -0.14628025
-0.66818777 * 0.22171287 = -0.14814583
 0.19781611 * 0.15868490 =  0.03139043
 0.16798161 * 0.13976379 =  0.02347775

transpose(training_inputs)
0 0 1 1
0 1 0 1
1 1 1 1

dot(transpose(training_inputs), adjustment) 
0*-0.14628025 + 0*-0.14814583 + 1*0.03139043 + 1*0.02347775 =  0.05486818
0*-0.14628025 + 1*-0.14814583 + 0*0.03139043 + 1*0.02347775 = -0.12466808
0*-0.14628025 + 0*-0.14814583 + 1*0.03139043 + 1*0.02347775 = -0.23955791

sum_to_weights( dot(transpose(training_inputs), adjustment) )
0.9 +  0.05486818 = 0.95486818
0.2 + -0.12466808 = 0.07533192
0.5 + -0.23955791 = 0.26044209

new weights:
0.95486818  0.07533192  0.26044209    
*/
...........................................................
import numpy as np

def sigmoid(x):
    return 1 / (1 + np.exp(-x))

def sigmoid_der(x):
    fx = sigmoid(x)
    return fx * (1 - fx)

training_inputs = np.array([ [ 10,  10],  #A
                             [-20, -20],  #Z
                             [ 30,  30],  #A
                             [-40, -40] ])#Z
                   
training_outputs = np.array( [1, 0, 1, 0] )

weight_1 = 0.3
weight_2 = 0.3
weight_3 = 0.3
weight_4 = 0.3
weight_5 = 2.6
weight_6 = 2.6

bias_1 = 0.1
bias_2 = 0.1
bias_3 = -2.4
learn_rate = 0.1

for iteration in range(1):
  for inputs, outputs in zip(training_inputs, training_outputs):
#                  _b1__
# INPUT0_____W1___|     |
#       \        /| H1  |
#        \      / |_____|\
#         \    W2         \
#          \  /            W5  _b3__
#           \/              \ |     |
#           /\                | O1  |
#          /  \             / |_____|
#         /    W3          W6
#        /      \  _b2__  /
# INPUT1/____W4__\|     |/
#                 | H2  |
#                 |_____|

    # INPUT0, INPUT1 -> H1
    sum_hidden_1  = inputs[0] * weight_1
    sum_hidden_1 += inputs[1] * weight_2
    sum_hidden_1 += bias_1
    
    hidden_1 = sigmoid( sum_hidden_1 )
    
    # INPUT0, INPUT1 -> H2 
    sum_hidden_2  = inputs[0] * weight_3
    sum_hidden_2 += inputs[1] * weight_4 
    sum_hidden_2 += bias_2

    hidden_2 = sigmoid(sum_hidden_2)
    
    # H1, H2 -> O1
    sum_output  = hidden_1 * weight_5
    sum_output += hidden_2 * weight_6
    sum_output += bias_3
    
    output = sigmoid(sum_output)
    
    # derivative
    der_weight_5 = hidden_1 * sigmoid_der(sum_output)
    der_weight_6 = hidden_2 * sigmoid_der(sum_output)
    
    der_bias_3 = sigmoid_der(sum_output)
    
    
    der_hidden_1 = weight_5 * sigmoid_der(sum_output)
    
    der_hidden_2 = weight_6 * sigmoid_der(sum_output)
    
    # INPUT <- H1
    der_weight_1 = inputs[0] * sigmoid_der(sum_hidden_1)
    der_weight_2 = inputs[1] * sigmoid_der(sum_hidden_1)
    
    der_bias_1 = sigmoid_der(sum_hidden_1)
    
    # INPUT <- H2
    der_weight_3 = inputs[0] * sigmoid_der(sum_hidden_2)
    der_weight_4 = inputs[1] * sigmoid_der(sum_hidden_2)

    der_bias_2 = sigmoid_der(sum_hidden_2)
    
    # update
    predict = outputs - output
    lp = learn_rate * predict
    
    weight_1 += lp * der_hidden_1 * der_weight_1
    weight_2 += lp * der_hidden_1 * der_weight_2
    bias_1   += lp * der_hidden_1 * der_bias_1
    
    weight_3 += lp * der_hidden_2 * der_weight_3
    weight_4 += lp * der_hidden_2 * der_weight_4
    bias_2   += lp * der_hidden_2 * der_bias_2
    
    weight_5 += lp * der_weight_5
    weight_6 += lp * der_weight_6
    bias_3   += lp * der_bias_3
    
def feedforward(x):
    hidden_1 = sigmoid(weight_1 * x[0] + weight_2 * x[1] + bias_1)
    hidden_2 = sigmoid(weight_3 * x[0] + weight_4 * x[1] + bias_2)
    output   = sigmoid(weight_5 * hidden_1 + weight_6 * hidden_2 + bias_3)
    return output
    
print ( "A ", feedforward( [ 20, 20] ) ) #  A  0.9427070979365844
print ( "Z ", feedforward( [ -7, -8] ) ) #  Z  0.08805829212704612

 sum_hidden_1,       sum_hidden_2,       sum_output
 6.1                 6.1                 2.7883631876893626
-11.900732952233463 -11.900732952233463 -2.3996482860445565
 18.101117446367034  18.101117446367034  2.800313156625288
-23.90148569493069  -23.90148569493069  -2.4000086063273125
hidden_1             hidden_2             output
0.99776215147872360  0.99776215147872360  0.94204374377705940
0.00000678538354679  0.00000678538354679  0.08319952037347222
0.99999998623473530  0.99999998623473530  0.94269274414907390
0.00000000004165975  0.00000000004165975  0.08317204022079559
der_hidden_1         der_hidden_2
0.14195305432765990  0.1419530543276599
0.19834521857837610  0.1983452185783761
0.14047720494188984  0.14047720494188984
0.19830925735131638  0.19830925735131638
 predict              lp
 0.05795625622294065  0.005795625622294066
-0.08319952037347222 -0.008319952037347223
 0.05730725585092611  0.005730725585092611
-0.08317204022079559 -0.00831720402207956
 der_weight_1            der_weight_2            der_weight_3            der_weight_4            der_weight_5            der_weight_5
 0.022328405552722187    0.022328405552722187    0.022328405552722187    0.022328405552722187    0.05447514803651618692  0.05447514803651618692
-0.00013570675010718468 -0.00013570675010718468 -0.00013570675010718468 -0.00013570675010718468  0.00000051757114477889  0.00000051757114477889
 0.00000041295793549154  0.00000041295793549154  0.00000041295793549154  0.00000041295793549154  0.05402313353411986041  0.05402313353411986041
-0.00000000166638997677 -0.00000000166638997677 -0.00000000166638997677 -0.00000000166638997677  0.00000000000317674136  0.00000000000317674136
der_bias_1        der_bias_2        der_bias_3
0.002232840555272 0.002232840555272 0.054597328587561
0.000006785337505 0.000006785337505 0.076277360183096
0.000000013765265 0.000000013765265 0.054023134277763
0.000000000041660 0.000000000041660 0.076254451946306
weight_1            weight_2            weight_3            weight_4            weight_5            weight_6
0.300018369730162   0.300018369730162   0.300018369730162   0.300018369730162   2.600315717563739   2.600315717563739
0.3000185936765223  0.3000185936765223  0.3000185936765223  0.3000185936765223  2.600315713257572   2.600315713257572
0.3000185940089684  0.3000185940089684  0.3000185940089684  0.3000185940089684  2.6006253050111026  2.6006253050111026
0.30001859401171693 0.30001859401171693 0.30001859401171693 0.30001859401171693 2.6006253050110764  2.6006253050110764
bias_1              bias_2               bias_3
0.1000018369730162  0.1000018369730162  -2.399683574323529
0.10000182577569819 0.10000182577569819 -2.400318198301788
0.10000182578677973 0.10000182578677973 -2.400008606543995
0.10000182578671102 0.10000182578671102 -2.4006428303784246
