
1. english text

2. convert voice to text

3. text translation
////////////////////////////////////////////////////////////

audio recognition library - cmusphinx / voce / kaldi 

////////////////////////////////////////////////////////////

javascript web speech api - provides google chrome browser
var recognition = new webkitSpeechRecognition();

<!-- text input by voice through google api -->
<!DOCTYPE html>
<html>
    
    <head>   
        <script>
            function start_recognition()
            {
                var rec = new webkitSpeechRecognition();
            
                rec.lang = "en-US";
                rec.start();
                
                rec.onresult = function(e)
                {
                    document.write(e.results[0][0].transcript);
                    rec.stop();
                };
            }
        </script>
    </head>

    <body>

        <p id="output" onclick="start_recognition()">...</p>

    </body>

</html>

////////////////////////////////////////////////////////////
text to image - Graphics 2D API
...........................................................

public class Text_to_image
{
    void out(String text, String name_file, int text_size)
    {
        BufferedImage img = new BufferedImage
        (1, 1, BufferedImage.TYPE_INT_RGB);

        Graphics2D g2d = img.createGraphics();
        
        Font font = new Font("Arial", Font.PLAIN, text_size);
        g2d.setFont(font);        
        
        FontMetrics size = g2d.getFontMetrics();
        int width = size.stringWidth(text);
        int heigth = size.getHeight();
        
        
        img = new BufferedImage
        (width, heigth, BufferedImage.TYPE_INT_RGB);
        
        g2d = img.createGraphics();
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setFont(font);

        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, width, heigth);

        g2d.setColor(Color.BLACK);
        g2d.drawString(text, 0, size.getAscent());

        try
        {
            ImageIO.write(img, "png", 
                    new File(name_file + ".png"));
        }
        catch (IOException ex)
        {
            System.err.println("file not write");
        }

        System.out.println("Image done");
    }
}

////////////////////////////////////////////////////////////
text to speech - FreeTTS / MaryTTS

add libraries:
marytts-client-5.2-jar-with-dependencies.jar
marytts-runtime-5.2-jar-with-dependencies.jar
marytts-lang-en-5.2.jar
voice-cmu-slt-hsmm-5.2.jar
voice-cmu-bdl-hsmm-5.2.jar
voice-cmu-rms-hsmm-5.2.jar
...........................................................

public class Text_to_image
{
    public static void main(String[] args) 
            throws MaryConfigurationException, 
            SynthesisException
    {
        String text = "John is walking.";
        
        MaryInterface mary = new LocalMaryInterface();
        mary.setVoice("cmu-rms-hsmm");
        
        AudioInputStream audio = mary.generateAudio( text );
        
        new Play(audio);
    }
}

final class Play
{
    Play(AudioInputStream audio)
    {
        play_audio(audio);
    }
    
    void play_audio(AudioInputStream audio)
    {
        AudioPlayer tts = new AudioPlayer();
        tts.setAudio(audio);
        tts.start();
    }
}

////////////////////////////////////////////////////////////
text to image
text to speech
read file  line by line
...........................................................
import java.awt.Color;
import java.awt.Font;
import java.awt.FontMetrics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import javax.imageio.ImageIO;

class TextToImage
{
    void output(String text, int file_name, int text_size)
    {
        BufferedImage img = new BufferedImage
        (1, 1, BufferedImage.TYPE_INT_RGB);

        Graphics2D g2d = img.createGraphics();
        
        
        Font font = new Font("Arial", Font.PLAIN, text_size);
        g2d.setFont(font);        
        
        FontMetrics size = g2d.getFontMetrics();
        int width = size.stringWidth(text);
        int heigth = size.getHeight();
        
        
        img = new BufferedImage
        (width, heigth, BufferedImage.TYPE_INT_RGB);
        
        g2d = img.createGraphics();
        
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING, 
                RenderingHints.VALUE_ANTIALIAS_ON);
        
        g2d.setFont(font);
        

        g2d.setColor(Color.WHITE);
        g2d.fillRect(0, 0, width, heigth);

        g2d.setColor(Color.BLACK);
        g2d.drawString(text, 0, size.getAscent());

        try
        {
            ImageIO.write(img, "png", 
                    new File(file_name + ".png"));
        }
        catch (IOException ex)
        {
            System.err.println("file not write " + ex);
        }

        System.out.println("Image done");
    }
}
...........................................................
import java.io.File;
import java.io.IOException;
import javax.sound.sampled.AudioFileFormat;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;
import marytts.LocalMaryInterface;
import marytts.MaryInterface;
import marytts.exceptions.MaryConfigurationException;
import marytts.exceptions.SynthesisException;
import marytts.modules.synthesis.Voice;
import marytts.util.data.audio.AudioPlayer;
import marytts.signalproc.effects.AudioEffect;
import marytts.signalproc.effects.AudioEffects;

class TextToSpeech
{
    private MaryInterface mary;
    private AudioInputStream audio;

    TextToSpeech()
    {
        try
        {
            mary = new LocalMaryInterface();
            mary.setVoice("cmu-rms-hsmm");
        }
        catch (MaryConfigurationException ex)
        {
            System.err.println("MaryTTS is not configured");
        }
    }
    
    void output(String text, int file_name)
    {
        speech_generation(text);
        save_audio(file_name);
    }
    
    private void speech_generation(String text)
    {
        try
        {            
            audio = mary.generateAudio( text );
        }
        catch (SynthesisException ex)
        {
            System.err.println("speech is not generated");
        }
    }
    
    private void save_audio(int file_name)
    {
        try
        { 
            AudioSystem.write(audio, AudioFileFormat.Type.WAVE,
                    new File(file_name + ".wav"));
        }
        catch (IOException ex)
        {
            System.err.println("audio not saved");
        }
    }
    
    void set_voice(String voice)
    {
        mary.setVoice(voice);
    }

    void play_audio(AudioInputStream audio)
    {
        AudioPlayer tts = new AudioPlayer();
        tts.setAudio(audio);
        tts.start();
    }
    
    void get_list_voices()
    {
        /* output all installed voices */
         Voice.getAvailableVoices()
                    .stream()
                    .forEach(System.out::println);
        // cmu-rms en_US male unit general
        // cmu-bdl-hsmm en_US male hmm
    }
    
    void get_list_audio_effects()
    {
        /* output all audio effects */
        for(AudioEffect e : AudioEffects.getEffects())
        {
            System.out.println("====================");
            System.out.println(e.getName());
            System.out.println(e.getHelpText());
        }
        //mary.setAudioEffects("durScale:0.5;");
    }
}
...........................................................
import java.io.File;
import java.io.FileNotFoundException;
import java.util.Scanner;

public class ReadFile
{    
    private File file;
    private Scanner scanner;
    
    ReadFile(String pathname)
    {        
        file = new File(pathname);
        
        try
        {
            scanner = new Scanner(file);
        } 
        catch (FileNotFoundException ex)
        {
            System.err.println("file not found");
        }
    }
    
    boolean has_string()
    {
        return scanner.hasNextLine();
    }
    
    String get_string()
    {
        return scanner.nextLine();
    }
}

////////////////////////////////////////////////////////////

<!DOCTYPE html>
<!-- get string from file by index -->
<html>
    <head>      
    </head>
    
    <body>
        <?php
            $file_names = "file_names.txt";

            $string = file($file_names);
            
            echo $string[1];
        ?>
    </body>
</html>
