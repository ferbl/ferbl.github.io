task:
enter and output a string
code:
#include <stdio.h>
int main()
{		
	char string[100];
	
	printf("enter the string > ");
	
	fgets(string, sizeof(string), stdin);
	
	
	printf("output > ");
	
	printf("%s", string);
	
	return 0;
}
output:
enter the string > ABC abc 123
output > ABC abc 123

task:
print the version of program using a preprocessor
code:
#include <stdio.h>

#define VERSION printf("version 3.56.4 \n");

int main()
{		
	VERSION;
	
	return 0;
}
output:
version 3.56.4

task:
finish the program ahead of schedule
exit(EXIT_SUCCESS) - uses stdlib.h
code:
#include <stdio.h>
#include <stdlib.h>

int main()
{		
	printf("program shutdown...");
	
	exit(EXIT_SUCCESS);

	
	printf("text...");
	
	return EXIT_SUCCESS;
}
output:
program shutdown...

task:
exit the program using the "exit" command
fgets - saves a string with a character '\n'
strcmp - compares strings
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PROMPT printf("db > ");
char command[100];

int main()
{		
	PROMPT;
	
	fgets(command, sizeof(command), stdin);
	
	if( strcmp(command, "exit\n") == 0 )
	{
		printf("program shutdown... \n");
		exit(EXIT_SUCCESS);
	}
	else
	{
		printf("command unknown \n");
	}
	
	return EXIT_SUCCESS;
}
output:
db > exit
program shutdown...

task:
use true and false. instead of 1 and 0
code:
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int main()
{		
	if(true)
	{
		printf("true");
	}
	
	if(false)
	{
		printf("false");
	}
	
	return EXIT_SUCCESS;
}
output:
true

task:
compare the first characters of two strings
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{		
	char one[9] = "123456789";
	char two[9] = "123455555";
	
	if( strncmp(one, two, 5) == 0 )
	{
		printf("first 5 characters are equal \n");
	}
	
	if( strncmp(one, two, 6) == 0 )
	{
		printf("first 6 characters are equal \n");
	}
	else
	{
		printf("first 6 characters are not equal \n");
	}
	
	return EXIT_SUCCESS;
}
output:
first 5 characters are equal
first 6 characters are not equal

task:
endless loop of command input
add select and insert commands
end the program only after entering the "exit" command 
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define PROMPT printf("db > ");
char command[100];

int main()
{		
	while(true)
	{
		PROMPT;
	
		fgets(command, sizeof(command), stdin);
	
	
		if( strncmp(command, "select", 6) == 0 )
		{
			printf("data selection... \n");
		}
		else if( strncmp(command, "insert", 6) == 0 )
		{
			printf("data insertion... \n");
		}
		else if( strcmp(command, "exit\n") == 0 )
		{
			printf("program shutdown... \n");
			exit(EXIT_SUCCESS);
		}
		else
		{
			printf("command unknown \n");
		}
	}
	
	return EXIT_SUCCESS;
}
output:
db > insert ABC
data insertion...
db > select 123
data selection...
db > help
command unknown
db > exit
program shutdown...

task:
read the necessary parts of string
code:
#include <stdio.h>
#include <stdlib.h>

int main()
{		
	int number;
	char str_one[10];
	char str_two[10];
	
	char string[] = "text 15 Aaa Bbb ZZZ";
	
	sscanf(string, "text %d %s %s ZZZ", &number, str_one, str_two);
	
	
	printf("%d, %s, %s \n", number, str_one, str_two);
	
	return EXIT_SUCCESS;
}
output:
15, Aaa, Bbb

task:
use the "insert" command to save data
use the "select" command to print all users
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define PROMPT printf("db > ");
char command[100];

typedef struct
{
	int id;
	char name[32];
	char email[255];
} User;

User user[100];
int user_num = 0;

void add_user()
{	
	sscanf(command, "insert %d %s %s \n", &user[user_num].id, user[user_num].name, user[user_num].email);
	
	user_num++;
}

void print_all_users()
{
	int i;
	
	for(i = 0; user_num > i; i++)
	{
		printf("%d, %s, %s \n", user[i].id, user[i].name, user[i].email);
	}
}

int main()
{		
	while(true)
	{
		PROMPT;
	
		fgets(command, sizeof(command), stdin);
	
	
		if( strncmp(command, "select", 6) == 0 )
		{
			print_all_users();
			printf("data selection completed... \n");
		}
		else if( strncmp(command, "insert", 6) == 0 )
		{
			add_user();
			printf("data insertion completed... \n");
		}
		else if( strcmp(command, "exit\n") == 0 )
		{
			printf("program shutdown... \n");
			exit(EXIT_SUCCESS);
		}
		else
		{
			printf("command unknown \n");
		}
	}
	
	return EXIT_SUCCESS;
}
output:
db > insert 1 Aaaa aaa@aa.aa
data insertion completed...
db > insert 2 Bbbb bbb@bb.bb
data insertion completed...
db > select
1, Aaaa, aaa@aa.aa
2, Bbbb, bbb@bb.bb
data selection completed...
db > exit
program shutdown...

task:
code:





































































































