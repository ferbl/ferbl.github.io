task:
enter and output a string
code:
#include <stdio.h>
int main()
{		
	char string[100];
	
	printf("enter the string > ");
	
	fgets(string, sizeof(string), stdin);
	
	
	printf("output > ");
	
	printf("%s", string);
	
	return 0;
}
output:
enter the string > ABC abc 123
output > ABC abc 123

task:
print the version of program using a preprocessor
code:
#include <stdio.h>

#define VERSION printf("version 3.56.4 \n");

int main()
{		
	VERSION;
	
	return 0;
}
output:
version 3.56.4

task:
finish the program ahead of schedule
exit(EXIT_SUCCESS) - uses stdlib.h
code:
#include <stdio.h>
#include <stdlib.h>

int main()
{		
	printf("program shutdown...");
	
	exit(EXIT_SUCCESS);

	
	printf("text...");
	
	return EXIT_SUCCESS;
}
output:
program shutdown...

task:
exit the program using the "exit" command
fgets - saves a string with a character '\n'
strcmp - compares strings
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

#define PROMPT printf("db > ");
char command[100];

int main()
{		
	PROMPT;
	
	fgets(command, sizeof(command), stdin);
	
	if( strcmp(command, "exit\n") == 0 )
	{
		printf("program shutdown... \n");
		exit(EXIT_SUCCESS);
	}
	else
	{
		printf("command unknown \n");
	}
	
	return EXIT_SUCCESS;
}
output:
db > exit
program shutdown...

task:
use true and false. instead of 1 and 0
code:
#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

int main()
{		
	if(true)
	{
		printf("true");
	}
	
	if(false)
	{
		printf("false");
	}
	
	return EXIT_SUCCESS;
}
output:
true

task:
compare the first characters of two strings
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{		
	char one[9] = "123456789";
	char two[9] = "123455555";
	
	if( strncmp(one, two, 5) == 0 )
	{
		printf("first 5 characters are equal \n");
	}
	
	if( strncmp(one, two, 6) == 0 )
	{
		printf("first 6 characters are equal \n");
	}
	else
	{
		printf("first 6 characters are not equal \n");
	}
	
	return EXIT_SUCCESS;
}
output:
first 5 characters are equal
first 6 characters are not equal

task:
endless loop of command input
add select and insert commands
end the program only after entering the "exit" command 
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define PROMPT printf("db > ");
char command[100];

int main()
{		
	while(true)
	{
		PROMPT;
	
		fgets(command, sizeof(command), stdin);
	
	
		if( strncmp(command, "select", 6) == 0 )
		{
			printf("data selection... \n");
		}
		else if( strncmp(command, "insert", 6) == 0 )
		{
			printf("data insertion... \n");
		}
		else if( strcmp(command, "exit\n") == 0 )
		{
			printf("program shutdown... \n");
			exit(EXIT_SUCCESS);
		}
		else
		{
			printf("command unknown \n");
		}
	}
	
	return EXIT_SUCCESS;
}
output:
db > insert ABC
data insertion...
db > select 123
data selection...
db > help
command unknown
db > exit
program shutdown...

task:
read the necessary parts of string
code:
#include <stdio.h>
#include <stdlib.h>

int main()
{		
	int number;
	char str_one[10];
	char str_two[10];
	
	char string[] = "text 15 Aaa Bbb ZZZ";
	
	sscanf(string, "text %d %s %s ZZZ", &number, str_one, str_two);
	
	
	printf("%d, %s, %s \n", number, str_one, str_two);
	
	return EXIT_SUCCESS;
}
output:
15, Aaa, Bbb

task:
use the "insert" command to save data
use the "select" command to print all users
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define PROMPT printf("db > ");
char command[100];

typedef struct
{
	int id;
	char name[32];
	char email[255];
} User;

User user[100];
int user_num = 0;

void add_user()
{	
	sscanf(command, "insert %d %s %s \n", &user[user_num].id, user[user_num].name, user[user_num].email);
	
	user_num++;
}

void print_all_users()
{
	int i;
	
	for(i = 0; user_num > i; i++)
	{
		printf("%d, %s, %s \n", user[i].id, user[i].name, user[i].email);
	}
}

int main()
{		
	while(true)
	{
		PROMPT;
	
		fgets(command, sizeof(command), stdin);
	
	
		if( strncmp(command, "select", 6) == 0 )
		{
			print_all_users();
			printf("data selection completed... \n");
		}
		else if( strncmp(command, "insert", 6) == 0 )
		{
			add_user();
			printf("data insertion completed... \n");
		}
		else if( strcmp(command, "exit\n") == 0 )
		{
			printf("program shutdown... \n");
			exit(EXIT_SUCCESS);
		}
		else
		{
			printf("command unknown \n");
		}
	}
	
	return EXIT_SUCCESS;
}
output:
db > insert 1 Aaaa aaa@aa.aa
data insertion completed...
db > insert 2 Bbbb bbb@bb.bb
data insertion completed...
db > select
1, Aaaa, aaa@aa.aa
2, Bbbb, bbb@bb.bb
data selection completed...
db > exit
program shutdown...

task:
break a string into words
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{		
	char string[] = "AAA  BBB,CCC.DDD";
	char delimiters[] = " ,.";
	char *pointer;
	
	pointer = strtok(string, delimiters);
	
	while(pointer != NULL)
	{
		printf("%s \n", pointer);
		
		pointer = strtok(NULL, delimiters);
	}
	
	return EXIT_SUCCESS;
}
output:
AAA
BBB
CCC
DDD

task:
convert string to number
code:
#include <stdio.h>
#include <stdlib.h>

int main()
{		
	char one[] = "50";
	char two[] = "4";
	int num;
	
	num = atoi(one) + atoi(two);
	
	printf("num = %d", num);
	
	return EXIT_SUCCESS;
}
output:
num = 54

task:
replace character in string
strcspn() - returns string length from begin to first character found
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int main()
{		
	char string[] = "AAABAAA";
	char symbol[] = "B";
	int num;
	
	num = strcspn(string, symbol);
	
	printf("string length to character 'B' = %d \n", num);
	
	
	string[num] = 'A';
	
	printf("%s \n", string);
	
	
	return EXIT_SUCCESS;
}
output:
length to character 'B' = 3
AAAAAAA

task:
add user only if the entered arguments 
"insert" command are not empty and have a valid length
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

#define PROMPT printf("db > ");
#define NAME_SIZE 32
#define EMAIL_SIZE 255
char command[100];

typedef struct
{
	int id;
	char name[NAME_SIZE];
	char email[EMAIL_SIZE];
} User;

User user[100];
int user_num = 0;

void add_user()
{	
	char *keyword = strtok(command, " ");
	char *id = strtok(NULL, " ");
	char *name = strtok(NULL, " ");
	char *email = strtok(NULL, " ");
	
	if(id == NULL || name == NULL || email == NULL)
	{
		printf("syntax error \n");
	}
	else
	{
		if( strlen(name) > NAME_SIZE )
		{
			printf("name is more than 32 bytes \n");
		}
		else if( strlen(email) > EMAIL_SIZE )
		{
			printf("email is more than 255 bytes \n");
		}
		else
		{
			user[user_num].id = atoi(id);
			strcpy(user[user_num].name, name);
			strcpy(user[user_num].email, email);
			
			user_num++;
			
			printf("data insertion completed... \n");
		}
	}
	
}

void print_all_users()
{
	int i;
	
	for(i = 0; user_num > i; i++)
	{
		printf("%d, %s, %s \n", user[i].id, user[i].name, user[i].email);
	}
}

int main()
{		
	while(true)
	{
		PROMPT;
	
		fgets(command, sizeof(command), stdin);
		/* remove '\n' from input data fgets() */
		command[strcspn(command, "\n")] = 0;
	
		if( strncmp(command, "select", 6) == 0 )
		{
			print_all_users();
			printf("data selection completed... \n");
		}
		else if( strncmp(command, "insert", 6) == 0 )
		{
			add_user();
		}
		else if( strcmp(command, "exit") == 0 )
		{
			printf("program shutdown... \n");
			exit(EXIT_SUCCESS);
		}
		else
		{
			printf("command unknown \n");
		}
	}
	
	return EXIT_SUCCESS;
}
output:
db > insert 1 Aaa aaa@aa.aa
data insertion completed...
db > insert 2 Bbb
syntax error
db > insert 2 Bbb bbb@bb.bb
data insertion completed...
db > insert 3 Ccc ccc@cc.cc cccccc
data insertion completed...
db > select
1, Aaa, aaa@aa.aa
2, Bbb, bbb@bb.bb
3, Ccc, ccc@cc.cc
data selection completed...
db > exit
program shutdown...

task:
open the file if it exists
if it does not exist create
code:
#include <stdio.h>
#include <stdlib.h>

FILE *file;

int main()
{		
	printf("open file for reading or overwriting... \n");
	file = fopen("file.txt", "r+");
	
	if(file == NULL)
	{		
		printf("create file for writing... \n");
		file = fopen("file.txt", "w");
	}
	
	return EXIT_SUCCESS;
}
output:
open file for reading or overwriting...
create file for writing...

task:
write data to file immediately without closing the program
fprintf() - writes data to buffer
fclose() - closes stream and flushes buffer data to file
fflush() - not closes stream and flushes buffer data to file
code:
#include <stdio.h>
#include <stdlib.h>

FILE *file;

int main()
{		
	printf("opening a file for writing... \n");
	file = fopen("file.txt", "w");
	
	printf("writing date to buffer... \n");
	fprintf(file, "%s", "ABC");
	
	printf("flushing data from buffer to file... \n");
	fflush(file);
	
	return EXIT_SUCCESS;
}
output:
opening a file for writing...
writing date to buffer...
flushing data from buffer to file ...
file.txt:
ABC

task:
write user data to file
display all users saved to file
overwrite user data in file
code:
#include <stdio.h>
#include <stdlib.h>
#include <string.h>
#include <stdbool.h>

FILE *file;
void write_user_to_file();

#define PROMPT printf("db > ");
#define NAME_SIZE 32
#define EMAIL_SIZE 255
char command[100];

typedef struct
{
	int id;
	char name[NAME_SIZE];
	char email[EMAIL_SIZE];
} User;

User user[100];
int user_num = 0;
int user_size = sizeof( user[user_num] );

void add_user()
{	
	char *keyword = strtok(command, " ");
	char *id = strtok(NULL, " ");
	char *name = strtok(NULL, " ");
	char *email = strtok(NULL, " ");
	
	if(id == NULL || name == NULL || email == NULL)
	{
		printf("syntax error \n");
	}
	else
	{
		if( strlen(name) > NAME_SIZE )
		{
			printf("name is more than 32 bytes \n");
		}
		else if( strlen(email) > EMAIL_SIZE )
		{
			printf("email is more than 255 bytes \n");
		}
		else
		{			
			user_num = atoi(id);
	
			user[user_num].id = atoi(id);
			strcpy(user[user_num].name, name);
			strcpy(user[user_num].email, email);
			
			write_user_to_file();
			
			printf("data insertion completed... \n");
		}
	}
}

void write_user_to_file()
{
	fseek(file, user_num * user_size, SEEK_SET);
	
	fwrite(&user[user_num], user_size, 1, file);
	
	fflush(file);
}

void print_all_users()
{	
	rewind(file);
	
	while( fread(&user[user_num], user_size, 1, file) == 1 )
	{
		printf("%d, %s, %s \n", user[user_num].id, user[user_num].name, user[user_num].email);
	}
}

void open_file()
{
	file = fopen("file.db", "r+");
	
	if(file == NULL)
	{
		file = fopen("file.db", "w");
	}
}

int main()
{		
	open_file();

	while(true)
	{
		PROMPT;
	
		fgets(command, sizeof(command), stdin);
		/* remove '\n' from input data fgets() */
		command[strcspn(command, "\n")] = 0;
	
		if( strncmp(command, "select", 6) == 0 )
		{
			print_all_users();
			printf("data selection completed... \n");
		}
		else if( strncmp(command, "insert", 6) == 0 )
		{
			add_user();
		}
		else if( strcmp(command, "exit") == 0 )
		{
			fclose(file);
			printf("program shutdown... \n");
			exit(EXIT_SUCCESS);
		}
		else
		{
			printf("command unknown \n");
		}
	}
	
	return EXIT_SUCCESS;
}
output:
db > insert 0 aaa aaa@aaa.aa
data insertion completed...
db > insert 1 bbb bbb@bbb.bb
data insertion completed...
db > insert 2 ccc ccc@ccc.cc
data insertion completed...
output:
db > select
0, aaa, aaa@aaa.aa
1, bbb, bbb@bbb.bb
2, ccc, ccc@ccc.cc
data selection completed...
output:
db > insert 0 AAA AAA@AAA.AA
data insertion completed...
db > select
0, AAA, AAA@AAA.AA
1, bbb, bbb@bbb.bb
2, ccc, ccc@ccc.cc
data selection completed...

task:
code:




































































































